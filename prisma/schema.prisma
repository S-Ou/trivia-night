// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id        Int   @id @default(autoincrement())
  title      String
  description String?
  themeId    String?

  hideResults Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id])
  Question Question[]
  Category Category[]
  Results Results[]
  Option Option[]
}

enum QuestionType {
  multiChoice
  shortAnswer
}

model Question {
  eventId   Int
  id        String   @id @default(cuid())
  question  String
  questionType QuestionType
  categoryId Int
  imageUrl  String?
  indexWithinCategory Int
  optionOrder Int

  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  Option Option[]
}

model Option {
  id        String   @id @default(cuid())
  questionId String
  option    String
  isCorrect Boolean
  eventId   Int

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([questionId, id])
}

model Category {
  id      Int      @id @default(autoincrement())
  eventId Int
  name      String
  index Int

  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Question Question[]
}

model Results {
  eventId   Int
  playerId    String @id @default(cuid())
  playerName  String
  score     Int

  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([eventId, playerId])
  @@unique([eventId, playerName])
  @@index([eventId, playerId], name: "idx_event_player")
}
